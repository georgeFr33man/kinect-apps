//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Kinect.Toolkit.Properties {
    using System;
    
    
    /// <summary>
    ///   Klasa zasobu wymagająca zdefiniowania typu do wyszukiwania zlokalizowanych ciągów itd.
    /// </summary>
    // Ta klasa została automatycznie wygenerowana za pomocą klasy StronglyTypedResourceBuilder
    // przez narzędzie, takie jak ResGen lub Visual Studio.
    // Aby dodać lub usunąć składową, edytuj plik ResX, a następnie ponownie uruchom narzędzie ResGen
    // z opcją /str lub ponownie utwórz projekt VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        /// Zwraca buforowane wystąpienie ResourceManager używane przez tę klasę.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Kinect.Toolkit.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Przesłania właściwość CurrentUICulture bieżącego wątku dla wszystkich
        ///   przypadków przeszukiwania zasobów za pomocą tej klasy zasobów wymagającej zdefiniowania typu.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Parameter of type {0} not of of expected type {1}.
        /// </summary>
        internal static string DelegateCommandCastException {
            get {
                return ResourceManager.GetString("DelegateCommandCastException", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu All set!.
        /// </summary>
        internal static string MessageAllSet {
            get {
                return ResourceManager.GetString("MessageAllSet", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Kinect is listening.
        /// </summary>
        internal static string MessageAllSetListening {
            get {
                return ResourceManager.GetString("MessageAllSetListening", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This Kinect is being used by another application..
        /// </summary>
        internal static string MessageConflict {
            get {
                return ResourceManager.GetString("MessageConflict", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Oops, there is an error..
        /// </summary>
        internal static string MessageError {
            get {
                return ResourceManager.GetString("MessageError", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Initializing....
        /// </summary>
        internal static string MessageInitializing {
            get {
                return ResourceManager.GetString("MessageInitializing", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Too many USB devices! Please unplug one or more..
        /// </summary>
        internal static string MessageInsufficientBandwidth {
            get {
                return ResourceManager.GetString("MessageInsufficientBandwidth", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Kinect required.
        /// </summary>
        internal static string MessageNoAvailableSensors {
            get {
                return ResourceManager.GetString("MessageNoAvailableSensors", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This sensor is not genuine!.
        /// </summary>
        internal static string MessageNotGenuine {
            get {
                return ResourceManager.GetString("MessageNotGenuine", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Plug my power cord in!.
        /// </summary>
        internal static string MessageNotPowered {
            get {
                return ResourceManager.GetString("MessageNotPowered", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Kinect for Xbox not supported..
        /// </summary>
        internal static string MessageNotSupported {
            get {
                return ResourceManager.GetString("MessageNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This application needs a Kinect for Windows sensor in order to function. However, another application is using the Kinect Sensor..
        /// </summary>
        internal static string MoreInformationConflict {
            get {
                return ResourceManager.GetString("MoreInformationConflict", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu The Kinect Sensor is plugged in, however an error has occurred. For steps to resolve, please click the &quot;Help&quot; link..
        /// </summary>
        internal static string MoreInformationError {
            get {
                return ResourceManager.GetString("MoreInformationError", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu The Kinect Sensor needs the majority of the USB Bandwidth of a USB Controller. If other devices are in contention for that bandwidth, the Kinect Sensor may not be able to function..
        /// </summary>
        internal static string MoreInformationInsufficientBandwidth {
            get {
                return ResourceManager.GetString("MoreInformationInsufficientBandwidth", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This application needs a Kinect for Windows sensor in order to function. Please plug one into the PC..
        /// </summary>
        internal static string MoreInformationNoAvailableSensors {
            get {
                return ResourceManager.GetString("MoreInformationNoAvailableSensors", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This application needs a genuine Kinect for Windows sensor in order to function. Please plug one into the PC..
        /// </summary>
        internal static string MoreInformationNotGenuine {
            get {
                return ResourceManager.GetString("MoreInformationNotGenuine", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu The Kinect Sensor is plugged into the computer with its USB connection, but the power plug appears to be not powered..
        /// </summary>
        internal static string MoreInformationNotPowered {
            get {
                return ResourceManager.GetString("MoreInformationNotPowered", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu This application needs a Kinect for Windows sensor in order to function. Please plug one into the PC..
        /// </summary>
        internal static string MoreInformationNotSupported {
            get {
                return ResourceManager.GetString("MoreInformationNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu Unable to launch the default web browser. Trying to navigate to: {0}.
        /// </summary>
        internal static string NoDefaultBrowserAvailable {
            get {
                return ResourceManager.GetString("NoDefaultBrowserAvailable", resourceCulture);
            }
        }
    }
}
